@model WebBanHangOnline.Models.EF.Product
@using WebBanHangOnline.Models.Common
@{
    ViewBag.Title = Model.Title;
    ViewBag.SeoDescription = Model.SeoDescription;
    ViewBag.SeoTitle = Model.SeoTitle;
    ViewBag.SeoKeywords = Model.SeoKeywords;
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<link rel="stylesheet" type="text/css" href="~/Content/assets/styles/single_styles.css">
<link rel="stylesheet" type="text/css" href="~/Content/assets/styles/single_responsive.css">


@if (Model != null)
{
    <div class="container single_product_container">
        <div class="row">
            <div class="col">

                <!-- Breadcrumbs -->

                <div class="breadcrumbs d-flex flex-row align-items-center">
                    <ul>
                        <li><a href="/">Trang chủ</a></li>
                        <li><a href="/san-pham/@Model.ProductCategory.Alias-@Model.ProductCategory.Id"><i class="fa fa-angle-right" aria-hidden="true"></i>@Model.ProductCategory.Title</a></li>
                        <li class="active"><a href="#"><i class="fa fa-angle-right" aria-hidden="true"></i>@Model.Title</a></li>
                    </ul>
                </div>

            </div>
        </div>

        <div class="row">

            @if (Model.ProductImage != null && Model.ProductImage.Any())
            {
                <div class="col-lg-7">
                    <div class="single_product_pics">
                        <div class="row">
                            <div class="col-lg-3 thumbnails_col order-lg-1 order-2">
                                <div class="single_product_thumbnails">
                                    <ul>
                                        @foreach (var item in Model.ProductImage.Take(3))
                                        {
                                            if (item.IsDefault)
                                            {
                                                <li class="active"><img height="100%" src="@item.Image" alt="" data-image="@item.Image"></li>

                                            }
                                            else
                                            {

                                                <li><img height="100%" src="@item.Image" alt="" data-image="@item.Image"></li>
                                            }
                                            @*<li class="active"><img src="images/single_2_thumb.jpg" alt="" data-image="images/single_2.jpg"></li>
                                                <li><img src="images/single_3_thumb.jpg" alt="" data-image="images/single_3.jpg"></li>*@
                                        }

                                    </ul>
                                </div>
                            </div>
                            <div class="col-lg-9 image_col order-lg-2 order-1">
                                <div class="single_product_image">
                                    <div class="single_product_image_background" style="background-image:url(@Model.ProductImage.FirstOrDefault(x => x.IsDefault).Image)"></div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }


            <div class="col-lg-5">
                <div class="product_details">
                    <div class="product_details_title">
                        <h2>@Model.Title</h2>
                        <p>@Model.Description</p>
                        <p>Số lượt xem: @Model.ViewCount</p>
                        @if (Model.StoreID != null)
                        {
                            <p class="text-danger">Chỉ có ở cửa hàng @Model.Store.Name thuộc @Model.Store.Province</p>
                        }
                    </div>
                    @*<div class="free_delivery d-flex flex-row align-items-center justify-content-center">
                            <span class="ti-truck"></span><span>free delivery</span>
                        </div>*@
                    @if (Model.PriceSale > 0)
                    {
                        <div class="original_price">@Common.FormatNumber(Model.Price, 0)</div>
                        <div class="product_price">@Common.FormatNumber(Model.PriceSale, 0)</div>
                    }
                    else
                    {
                        <div class="product_price">@Common.FormatNumber(Model.Price)</div>
                    }

                    <ul class="star_rating">
                        <li><i class="fa fa-star" aria-hidden="true"></i></li>
                        <li><i class="fa fa-star" aria-hidden="true"></i></li>
                        <li><i class="fa fa-star" aria-hidden="true"></i></li>
                        <li><i class="fa fa-star" aria-hidden="true"></i></li>
                        <li><i class="fa fa-star-o" aria-hidden="true"></i></li>
                    </ul>
                    @*<div class="product_color">
                            <span>Màu hiện có:</span>
                            <ul>
                                <li style="background: #e54e5d"></li>
                                <li style="background: #252525"></li>
                                <li style="background: #60b3f3"></li>
                            </ul>
                        </div>*@
                    <div class="quantity d-flex flex-column flex-sm-row align-items-sm-center">
                        <span style="width:100px;">Số lượng:</span>
                        <div class="quantity_selector">
                            <span class="minus"><i class="fa fa-minus" aria-hidden="true"></i></span>
                            <span id="quantity_value">1</span>
                            <span class="plus"><i class="fa fa-plus" aria-hidden="true"></i></span>
                        </div>
                        <div class="red_button add_to_cart_button"><a href="#" class="btnAddToCart" data-id="@Model.Id">Thêm vào giỏ hàng</a></div>

                        @{
                            var wishList = Model.WishLists.FirstOrDefault(x => x.CustomerName == User.Identity.Name);
                            var IsWishList = false;
                            if (wishList != null)
                            {
                                IsWishList = true;
                            }
                        }
                        @if (IsWishList == true)
                        {
                            <div data-id="@Model.Id" class="product_favorite favorite d-flex flex-column align-items-center justify-content-center active"></div>
                        }
                        else
                        {
                            <div data-id="@Model.Id" class="product_favorite favorite d-flex flex-column align-items-center justify-content-center"></div>
                        }
                    </div>
                </div>
            </div>
        </div>

    </div>

    <!-- Tabs -->

    <div class="tabs_section_container">

        <div class="container">
            <div class="row">
                <div class="col">
                    <div class="tabs_container">
                        <ul class="tabs d-flex flex-sm-row flex-column align-items-left align-items-md-center justify-content-center">
                            <li class="tab active" data-active-tab="tab_1"><span>Mô tả</span></li>
                            @*<li class="tab" data-active-tab="tab_2"><span>Additional Information</span></li>*@
                            <li class="tab" data-active-tab="tab_3"><span>Đánh giá (@ViewBag.ReviewProductCount)</span></li>
                        </ul>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col">

                    <!-- Tab Description -->

                    <div id="tab_1" class="tab_container active">
                        @if (Model.Detail == null)
                        {
                            <div class="row text-center" style="justify-content: space-around;">
                                <h6 class="text-danger">Sản phẩm hiện tại chưa mô tả</h6>
                            </div>
                        }
                        else
                        {
                            <div class="row">
                                @Html.Raw(Model.Detail)
                            </div>
                        }
                    </div>

                    <!-- Tab Additional Info -->
                    @*<div id="tab_2" class="tab_container">
                            <div class="row">
                                <div class="col additional_info_col">
                                    <div class="tab_title additional_info_title">
                                        <h4>Additional Information</h4>
                                    </div>
                                    <p>COLOR:<span>Gold, Red</span></p>
                                    <p>SIZE:<span>L,M,XL</span></p>
                                </div>
                            </div>
                        </div>*@

                    <!-- Tab Reviews -->

                    <div id="tab_3" class="tab_container">
                        <div class="row">

                            <!-- User Reviews -->

                            <div class="col-lg-6 reviews_col">
                                @Html.Action("Partial_ListReview", "Review", new { productId = Model.Id })
                            </div>

                            <!-- Add Review -->

                            <div class="col-lg-6 add_review_col">

                                @Html.Action("Partial_AddReview", "Review", new { productId = Model.Id })

                            </div>

                        </div>
                    </div>

                </div>
            </div>
        </div>
    </div>

    <div class="container mt-5">
        <div class="row">
            <div class="col-12">
                <div class="row">
                    <h3 class="mb-3">Sản phẩm cùng loại</h3>
                </div>
                @Html.Action("Partial_SanPhamGoiYTheoDanhMuc", "Product", new { categoryId = Model.ProductCategory.Id, productID = Model.Id })
            </div>
        </div>
        <div class="row">
            <div class="col-12">
                <div class="row mt-5">
                    <h4 class="mb-3">Sản phẩm nổi bật theo cửa hàng gần nhất</h4>
                </div>
                    @*@Html.Action("Partial_ProductListNearestStoreId","Product")*@
                <div id="list-product-nearest">

                </div>
            </div>
        </div>
    </div>
}

<div id="map" class="mt-5" style="width: 100%; height: 400px;"></div>



@section scripts {
    <script src="~/Content/assets/js/single_custom.js"></script>
    <script>

        function initMap() {
            // Tạo một đối tượng bản đồ mới
            var map = new Microsoft.Maps.Map(document.getElementById('map'), {
            });
            let stores = @Html.Raw(Json.Encode(ViewBag.StoreAddress));
            let nearestStore; // Biến để lưu cửa hàng gần nhất

            // Lấy vị trí hiện tại
            navigator.geolocation.getCurrentPosition(function (position) {
                var loc = new Microsoft.Maps.Location(
                    position.coords.latitude,
                    position.coords.longitude
                );

                console.log(position.coords.latitude);
                console.log(position.coords.longitude);

                // Đặt trung tâm bản đồ vào vị trí hiện tại
                map.setView({
                    center: loc,
                    zoom: 20
                });

                //// Thêm đánh dấu vị trí hiện tại
                //var pin = new Microsoft.Maps.Pushpin(loc);
                //map.entities.push(pin);
                var sourceLocation = {
                    latitude: position.coords.latitude,
                    longitude: position.coords.longitude
                }

                Microsoft.Maps.loadModule('Microsoft.Maps.Directions', function () {
                    var searchManager = new Microsoft.Maps.Search.SearchManager(map);
                    // Tìm tọa độ của nguồn
                    // Duyệt qua danh sách cửa hàng và tính khoảng cách
                    let nearestStoreDistance;
                    let nearestStoreDuration;
                    let nearestStore;
                    let locationNearestStore;
                    let nearestStoreLayer;
                    let minDistance = Infinity;
                    let listLayer = [];
                    let countLoop = 0;
                    // Tìm tọa độ của đích
                    for (var i = 0; i < stores.length; i++) {
                        let store = stores[i];
                        geocodeAddress(searchManager, store.Address, function (destinationLocation) {
                            var directionsManager = new Microsoft.Maps.Directions.DirectionsManager(map);
                            // // Lấy dường đi ngắn nhất
                            Microsoft.Maps.Events.addHandler(directionsManager, 'directionsUpdated', function (directionsEvent) {
                                var route = directionsManager.getRouteResult()[0];
                                var distance = route.routeLegs[0].summary.distance;
                                var duration = route.routeLegs[0].summary.time;
                                //console.log(`Khoảng cách: ${distance} km\nThời gian di chuyển: ${duration} giây`)
                                listLayer.push(directionsManager._layer)
                                countLoop++;
                                // So sánh và cập nhật cửa hàng gần nhất
                                if (distance < minDistance) {
                                    minDistance = distance;
                                    nearestStore = store;
                                    locationNearestStore = [destinationLocation];
                                    //console.log("Store update: ", nearestStore);
                                    //console.log("locationNearestStore update: ", locationNearestStore);
                                    // Lưu đường đi hiện tại
                                    nearestStoreLayer = directionsManager._layer;
                                    nearestStoreDistance = distance;
                                    nearestStoreDuration = duration;
                                }
                                // Khi đi qua hết vòng lập
                                if (countLoop == stores.length) {
                                    console.log(nearestStoreLayer)

                                    listLayer.forEach((layer) => {
                                        if (layer._internalId != nearestStoreLayer._internalId && layer._id != nearestStoreLayer._id) {
                                            map.layers.remove(layer);
                                        }
                                    })
                                    //document.getElementById('printoutPanel').innerHTML = `Địa chỉ khách hàng` `Khoảng cách: ${distance} km \n`+ `Thời gian di chuyển: ${duration} giây`;
                                    //let timeObject = secondsToHoursMinutes(nearestStoreDuration)
                                    //document.getElementById('printoutPanel').innerHTML =
                                    //    '<b>Khách hàng</b> <br>' + [sourceLocation][0].name + '<br>' +
                                    //    `<b>Cửa hàng:</b> <br>` + nearestStore.Address + `<br>` +
                                    //    `<b>SĐT Cửa hàng:</b> <br>` + nearestStore.StorePhone + `<br>` +
                                    //    `<b>Khoảng cách: </b><br>` + nearestStoreDistance + ` km <br>` +
                                    //    `<b>Thời gian: </b><br>` + timeObject.hours + ` giờ, ` + timeObject.minutes + ' Phút';

                                    $.ajax({
                                        type: 'POST',
                                        url: '/Product/SaveNearestStoreId',
                                        data: { nearestStoreId: nearestStore.Id },
                                        success: function (data) { // Data ở đây là Partial View
                                            //Kiểm tra nếu nearestStoreId == null
                                            if (nearestStore.Id != 0) {
                                                document.getElementById('list-product-nearest').innerHTML = data;
                                            }
                                            else {
                                                document.getElementById('list-product-nearest').innerHTML = '<div class="text-danger">Chưa chọn cửa hàng gần nhất</div>';
                                            }
                                        },
                                        error: function () {
                                            console.error('Lỗi khi lưu trữ giá trị trên máy chủ.');
                                        }
                                    });

                                    // Lấy tất cả các điểm của nearestStoreLayer
                                    var locations = nearestStoreLayer.getPrimitives().filter(function (primitive) {
                                        return primitive instanceof Microsoft.Maps.Pushpin;
                                    }).map(function (pushpin) {
                                        return pushpin.getLocation();
                                    });

                                    // Tìm giới hạn xem chứa tất cả các điểm của nearestStoreLayer
                                    var bounds = Microsoft.Maps.LocationRect.fromLocations(locations);

                                    // Zoom vào giới hạn xem mới
                                    map.setView({ bounds: bounds });

                                    // Khi bấm vào nút xác nhận cửa hàng gần nhất

                                }
                            });

                            // Set Route Mode to driving
                            directionsManager.setRequestOptions({ routeMode: Microsoft.Maps.Directions.RouteMode.driving });
                            var waypoint1 = new Microsoft.Maps.Directions.Waypoint({ address: "Vị trí hiện tại", location: new Microsoft.Maps.Location(sourceLocation.latitude, sourceLocation.longitude) });
                            var waypoint2 = new Microsoft.Maps.Directions.Waypoint({ address: store.Address, location: new Microsoft.Maps.Location(destinationLocation.latitude, destinationLocation.longitude) });
                            directionsManager.addWaypoint(waypoint1);
                            directionsManager.addWaypoint(waypoint2);
                            // Tìm đường đi
                            directionsManager.calculateDirections();

                        });
                    }
                });
                // Tìm tọa độ theo tên đường
                function geocodeAddress(searchManager, address, callback) {
                    var searchRequest = {
                        where: address,
                        callback: function (result, userData) {
                            var location = result.results[0].location;
                            callback(location);
                        }
                    };
                    searchManager.geocode(searchRequest);
                }
            });
        }

    </script>
    <script type='text/javascript'
            src='https://www.bing.com/api/maps/mapcontrol?key=AsXqZAIwiXPz-BiqR_5COks2dHmzXxArTOTUbxvx4QOpOhqnOfClGu0Guk2Tt8yB&callback=initMap'
            async defer></script>

}
